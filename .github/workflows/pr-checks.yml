name: 🔍 Pull Request Checks

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Code Quality and Linting
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npx eslint . --ext .js --format github
        continue-on-error: true

      - name: 🎨 Check code formatting
        run: npx prettier --check .
        continue-on-error: true

  # Security Checks
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: 🕵️ Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Syntax and Basic Validation
  validation:
    name: ✅ Validation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔧 Check Node.js syntax
        run: |
          echo "Checking JavaScript syntax..."
          find . -name "*.js" -not -path "./node_modules/*" -exec node -c {} \;

      - name: 📋 Validate package.json
        run: npm ls --depth=0

      - name: 🔍 Check for console.log statements
        run: |
          if grep -r "console\.log" --include="*.js" --exclude-dir=node_modules .; then
            echo "::warning::Found console.log statements. Consider using proper logging."
          fi

  # File and Structure Checks
  structure:
    name: 📁 Project Structure
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check required files
        run: |
          required_files=("package.json" "README.md" ".gitignore" "index.js")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "::error::Required file missing: $file"
              exit 1
            fi
          done

      - name: 🔍 Check for sensitive files
        run: |
          sensitive_patterns=("*.env" "*.key" "*.pem" "config.json" "secrets.json")
          found_sensitive=false
          for pattern in "${sensitive_patterns[@]}"; do
            if find . -name "$pattern" -not -path "./node_modules/*" | grep -q .; then
              echo "::error::Sensitive file detected: $pattern"
              found_sensitive=true
            fi
          done
          if [[ "$found_sensitive" == "true" ]]; then
            exit 1
          fi

  # Privacy and Discord Bot Specific Checks
  discord-bot-checks:
    name: 🤖 Discord Bot Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for hardcoded tokens
        run: |
          if grep -r -i "token.*=" --include="*.js" --exclude-dir=node_modules . | grep -v "process.env" | grep -v "example" | grep -v "your_token_here"; then
            echo "::error::Possible hardcoded Discord token found!"
            exit 1
          fi

      - name: 🔍 Check privacy compliance
        run: |
          echo "Checking for privacy-related code patterns..."
          if grep -r "user\.id" --include="*.js" --exclude-dir=node_modules .; then
            echo "::notice::User ID usage detected - ensure privacy compliance"
          fi

      - name: 🔍 Validate Discord.js patterns
        run: |
          echo "Checking Discord.js best practices..."
          if grep -r "client\.login" --include="*.js" --exclude-dir=node_modules . | grep -v "process.env"; then
            echo "::warning::Client login should use environment variables"
          fi

  # Documentation Checks
  documentation:
    name: 📚 Documentation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check README updates
        run: |
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(js|ts)$' > /dev/null; then
            if ! git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E 'README\.md$' > /dev/null; then
              echo "::warning::Code changes detected but README.md not updated. Consider updating documentation."
            fi
          fi

      - name: 🔍 Check for TODO comments
        run: |
          if grep -r "TODO\|FIXME\|HACK" --include="*.js" --exclude-dir=node_modules .; then
            echo "::notice::TODO/FIXME comments found - consider creating issues for these"
          fi

  # Label Assignment
  label-assignment:
    name: 🏷️ Auto-label PR
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Add labels based on changes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = [];

            // Check file types and add appropriate labels
            const hasJSChanges = files.some(file => file.filename.endsWith('.js'));
            const hasDocChanges = files.some(file => file.filename.endsWith('.md'));
            const hasConfigChanges = files.some(file => file.filename.includes('config') || file.filename.includes('.env'));
            const hasCommandChanges = files.some(file => file.filename.includes('commands/'));
            const hasUtilChanges = files.some(file => file.filename.includes('utils/'));
            const hasDBChanges = files.some(file => file.filename.includes('database'));

            if (hasJSChanges) labels.push('code');
            if (hasDocChanges) labels.push('documentation');
            if (hasConfigChanges) labels.push('configuration');
            if (hasCommandChanges) labels.push('commands');
            if (hasUtilChanges) labels.push('utilities');
            if (hasDBChanges) labels.push('database');

            // Check PR size
            const totalChanges = files.reduce((sum, file) => sum + file.additions + file.deletions, 0);
            if (totalChanges < 50) labels.push('size/small');
            else if (totalChanges < 200) labels.push('size/medium');
            else labels.push('size/large');

            // Create labels if they don't exist
            const labelConfigs = {
              'code': { color: '0075ca', description: 'Code changes' },
              'documentation': { color: '0075ca', description: 'Documentation updates' },
              'configuration': { color: 'd4c5f9', description: 'Configuration changes' },
              'commands': { color: 'a2eeef', description: 'Bot command changes' },
              'utilities': { color: '7057ff', description: 'Utility function changes' },
              'database': { color: 'e99695', description: 'Database related changes' },
              'size/small': { color: 'c2e0c6', description: 'Small PR (< 50 changes)' },
              'size/medium': { color: 'fbca04', description: 'Medium PR (50-200 changes)' },
              'size/large': { color: 'd93f0b', description: 'Large PR (> 200 changes)' }
            };

            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label
                });
              } catch (error) {
                if (error.status === 404) {
                  // Label doesn't exist, create it
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label,
                    color: labelConfigs[label].color,
                    description: labelConfigs[label].description
                  });
                  console.log(`Created label: ${label}`);
                }
              }
            }

            // Add labels to PR
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }
